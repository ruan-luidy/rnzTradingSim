<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:hc="https://handyorg.github.io/handycontrol">

  <!--  Mine Button Style com Flip Effect e Suporte a Imagens  -->
  <Style x:Key="MineButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="#2a2a2a" />
    <Setter Property="BorderBrush" Value="#404040" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Width" Value="70" />
    <Setter Property="Height" Value="70" />
    <Setter Property="Margin" Value="3" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ControlTemplate.Resources>
            <Storyboard x:Key="StoryboardRevealed">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RevealedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnRevealedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RevealedElement" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnRevealedElement" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardUnRevealed">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RevealedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnRevealedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RevealedElement" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnRevealedElement" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut" />
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>

          <Border CornerRadius="8" SnapsToDevicePixels="True">
            <hc:SimplePanel>
              <!--  Estado não revelado (quadradinho normal)  -->
              <Border
                Name="UnRevealedElement"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="8"
                RenderTransformOrigin="0.5,0.5"
                SnapsToDevicePixels="True">
                <Border.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" />
                  </TransformGroup>
                </Border.RenderTransform>
              </Border>

              <!--  Estado revelado (com ícone ou imagem)  -->
              <Border
                Name="RevealedElement"
                Background="{Binding Path=Tag.RevealedBackground, RelativeSource={RelativeSource TemplatedParent}}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="8"
                RenderTransformOrigin="0.5,0.5"
                SnapsToDevicePixels="True">
                <Border.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="0" />
                  </TransformGroup>
                </Border.RenderTransform>

                <!--  Content Container que suporta tanto Image quanto TextBlock  -->
                <Grid>
                  <!--  Image for PNG files  -->
                  <Image
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RenderOptions.BitmapScalingMode="HighQuality"
                    Source="{Binding Path=Tag.RevealedContent, RelativeSource={RelativeSource TemplatedParent}}"
                    Stretch="Uniform">
                    <Image.Style>
                      <Style TargetType="Image">
                        <Setter Property="Visibility" Value="Visible" />
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding Path=Tag.RevealedContent, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Image.Style>
                  </Image>

                  <!--  Fallback TextBlock para compatibilidade  -->
                  <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontSize="24"
                    FontWeight="Bold"
                    Foreground="White"
                    Text="{Binding Path=Tag.FallbackText, RelativeSource={RelativeSource TemplatedParent}}">
                    <TextBlock.Style>
                      <Style TargetType="TextBlock">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding Path=Tag.RevealedContent, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Visible" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </Grid>
              </Border>
            </hc:SimplePanel>
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Opacity" Value="0.8" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=Tag.IsRevealed, RelativeSource={RelativeSource Self}}" Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardRevealed}" />
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardUnRevealed}" />
              </DataTrigger.ExitActions>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="0.4" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>